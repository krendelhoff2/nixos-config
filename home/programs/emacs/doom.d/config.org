#+title: Savely's Doom Emacs Config
#+startup: overview

* Packages
** Header
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
#+end_src
** MELPA / GNU ELPA
#+begin_src emacs-lisp :tangle packages.el
(package! tldr)

(package! org-wild-notifier)

(package! org-auto-tangle)

(package! doct)

(package! nov.el)

(package! beacon)

(package! esxml)

(package! guix)

(package! hcl-mode)

(package! org-kanban)
#+end_src
** Other packages
#+begin_src emacs-lisp :tangle packages.el
(package! kbd-mode
  :recipe (:host github
           :repo "kmonad/kbd-mode"))

(package! pdf-tools
  :recipe (:host github
           :repo "dalanicolai/pdf-tools"
           :branch "pdf-roll"
           :files ("lisp/*.el"
                   "README"
                   ("build" "Makefile")
                   ("build" "server")
                   (:exclude "lisp/tablist.el" "lisp/tablist-filter.el"))))

(package! image-roll
  :recipe (:host github
           :repo "dalanicolai/image-roll.el"))

(package! telega
  :recipe (:host github
           :repo "zevlg/telega.el"
           :branch "master"
           :files (:defaults "contrib" "etc" "server" "Makefile")))

;;(package! org-toggl
;;  :recipe (:host github
;;           :repo "krendelhoff2/org-toggl"
;;           :branch "master"))
#+end_src
* Init
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       (vertico +icons)           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +github +unicode)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       indent-guides     ; highlighted indent columns
       (ligatures +pragmata-pro)         ; ligatures and symbols to make your code pretty again
       minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       window-select     ; visually switch windows
       ;;workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +ranger +icons)             ; making dired pretty [functional]
       ;;electric          ; smarter, keyword-based electric-indent
       ibuffer         ; interactive buffer management
       (undo +tree)              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       shell             ; ... but not for everythin:g
       ;;term гавно ебаное учи tramp и eshell             ; but still very well integrated and emacsish

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       direnv
       (docker +lsp)
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       make              ; run make tasks from Emacs
       (pass +auth +auth)              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       tmux              ; an API for interacting with tmux
       ;;tree-sitter       ; syntax and parsing, sitting in a tree...
       upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       (cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       (graphql +lsp)    ; Give queries a REST
       (haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       idris             ; a language you can depend on
       (json +lsp)              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +roam2 +pretty +pomodoro +dragndrop +brain +gnuplot +present +noter)               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python +lsp)            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       (ruby)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust +lsp)              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       (scheme +guile)   ; a fully conniving family of lisps
       (sh +fish +lsp)                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       (yaml +lsp)              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       calendar
       emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +bindings +smartparens))
#+end_src

#+RESULTS:

* Configuration
** Header
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src
** Fonts
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "PragmataPro Mono Liga" :size 23)
      doom-variable-pitch-font (font-spec :family "DejaVu Sans" :size 24)
      doom-unicode-font (font-spec :family "JetBrainsMono Nerd Font" :weight 'bold :size 21)
      doom-big-font (font-spec :family "PragmataPro Mono Liga" :size 37))
#+end_src
** Initial global variables setup
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets. It is optional.
#+begin_src emacs-lisp
(setq user-full-name "Dmitry Laptov"
      user-mail-address "dmitry.laptov@serokell.io")
#+end_src
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set =doom-theme= or manually load a theme with the
=load-theme= function. This is the default:
#+begin_src emacs-lisp
(setq doom-theme 'doom-outrun-electric)

(setq display-line-numbers-type 'relative)

(setq dotfiles-dir (substitute-in-file-name "$HOME/.dotfiles/"))

(setq company-minimum-prefix-length 4
      company-idle-delay 1.0)

(setq projectile-globally-ignored-directories (list ".direnv" "/home/savely/education/org/.attach/" "^.ccls-cache$" "~/.emacs.d/.local/" "^\\.idea$" "^\\.vscode$" "^\\.ensime_cache$" "^\\.eunit$" "^\\.git$" "^\\.hg$" "^\\.fslckout$" "^_FOSSIL_$" "^\\.bzr$" "^_darcs$" "^\\.pijul$" "^\\.tox$" "^\\.svn$" "^\\.stack-work$" "^\\.ccls-cache$" "^\\.cache$" "^\\.clangd$"))

#+end_src
Enable camel case motion.
#+begin_src emacs-lisp
(global-subword-mode)
(beacon-mode -1)
#+end_src
The variable =auth-sources= controls how and where Auth-Source keeps its secrets. The default value is a list of three files: =("~/.authinfo" "~/.authinfo.gpg" "~/.netrc")=,
but to avoid confusion you should make sure that only one of these files exists and then you should also adjust the value of the variable to only ever use that file, for
example:
#+begin_src emacs-lisp
(setq auth-sources '("~/.authinfo"))
#+end_src
Yuck configuration:
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.yuck\\'" . parinfer-rust-mode))
#+end_src
Default shell:
#+begin_src emacs-lisp
(setq multi-term-program "bash")
#+end_src
#+begin_src emacs-lisp
(add-hook 'c-mode-hook #'indent-tabs-mode)
#+end_src
** Org mode
#+begin_src emacs-lisp
(use-package! org
  :init
  (setq org-directory "~/education/org")
  :custom
  (org-babel-confirm-evaluate nil)
  (org-ellipsis " ")
  (org-hide-emphasis-markers t)
  (org-agenda-files (mapcar (lambda (dir) (expand-file-name dir org-directory)) '("roam/" "roam/daily/")))
  (org-agenda-start-with-log-mode t)
  (org-log-into-drawer t)
  (org-log-done nil)
  (org-log-note-clock-out t)
  (org-babel-load-languages '((emacs-lisp . t) (haskell . t) (python . t) (eshell . t) (lisp . t) (latex . t))))

(use-package! org-tempo
  :config
  (add-to-list 'org-structure-template-alist (cons "sh" "src shell"))
  (add-to-list 'org-structure-template-alist (cons "esh" "src eshell"))
  (add-to-list 'org-structure-template-alist (cons "el" "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist (cons "cl" "src lisp"))
  (add-to-list 'org-structure-template-alist (cons "hs" "src haskell"))
  (add-to-list 'org-structure-template-alist (cons "py" "src python")))

(use-package! org-roam
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-completion-everywhere t)
  (org-roam-capture-templates
   '(("d" "default" plain
      "%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)
     ("w" "wiki" plain
      "%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: wiki\n#+startup: overview\n* REPOS\n* VIDEOS\n* ARTICLES\n* BOOKS\n* OTHER LINKS")
      :unnarrowed t)))
  (org-roam-dailies-capture-templates
    '(("d" "default" entry "* %<%I:%M %p>: %?"
       :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
  :bind (:map org-mode-map
         ("C-M-i" . completion-at-point))
  :config
  (require 'org-roam-dailies)
  (org-roam-db-autosync-mode))

(use-package! org-wild-notifier
  :hook (org-mode . org-wild-notifier-mode))

(use-package! org-auto-tangle
  :hook (org-mode . org-auto-tangle-mode))
;;(use-package! org-toggl
;;  :config
;;  (require 'org-toggl)
;;  (toggl-get-projects)
;;  (setq toggl-auth-token "ca6706c6423ad989be2db0211ef200ef"
;;        org-toggl-inherit-toggl-properties t)
;;  (org-toggl-integration-mode))
#+end_src
Package for declarative org-capture templates
#+begin_src emacs-lisp
(use-package! doct
  :commands (doct))
#+end_src
** Readers
#+begin_src emacs-lisp
(use-package! nov
  :mode ("\\.epub\\'" . nov-mode)
  :config
  (setq nov-save-place-file (concat doom-cache-dir "nov-places")))

(use-package! pdf-tools
 :custom
 (pdf-view-resize-factor 1.05)
 :hook (pdf-view-mode . pdf-view-roll-minor-mode)
       (pdf-view-mode . pdf-view-midnight-minor-mode))
#+end_src
** LSP
#+begin_src emacs-lisp
(after! lsp-haskell
  (setq lsp-ui-sideline-enable nil
        lsp-ui-peek-enable t
        lsp-haskell-formatting-provider "stylish-haskell"
        lsp-haskell-plugin-import-lens-code-lens-on nil))
#+end_src
** EAF
#+begin_src emacs-lisp
;;(use-package! eaf
;;  :load-path "~/.elisp/emacs-application-framework"
;;  :init
;;  :custom
;;  (eaf-browser-continue-where-left-off t)
;;  (eaf-browser-enable-adblocker t)
;;  ;;(browse-url-browser-function 'eaf-open-browser) ;; Make EAF Browser my default browser
;;  :config
;;  (defalias 'browse-web #'eaf-open-browser)
;;
;;  ;;(require 'eaf-file-manager)
;;  ;;(require 'eaf-music-player)
;;  ;;(require 'eaf-image-viewer)
;;  ;;(require 'eaf-camera)
;;  ;;(require 'eaf-demo)
;;  ;;(require 'eaf-airshare)
;;  ;;(require 'eaf-terminal)
;;  ;;(require 'eaf-markdown-previewer)
;;  ;;(require 'eaf-video-player)
;;  ;;(require 'eaf-vue-demo)
;;  ;;(require 'eaf-file-sender)
;;  ;;(require 'eaf-pdf-viewer)
;;  ;;(require 'eaf-mindmap)
;;  ;;(require 'eaf-netease-cloud-music)
;;  ;;(require 'eaf-jupyter)
;;  ;;(require 'eaf-org-previewer)
;;  ;;(require 'eaf-system-monitor)
;;  ;;(require 'eaf-rss-reader)
;;  ;;(require 'eaf-file-browser)
;;  (require 'eaf-browser)
;;  ;;(require 'eaf-org)
;;  ;;(require 'eaf-mail)
;;  ;;(require 'eaf-git)
;;  ;;(when (display-graphic-p)
;;  ;;  (require 'eaf-all-the-icons))
;;
;;  (require 'eaf-evil))
;;  ;;(define-key key-translation-map (kbd "SPC")
;;  ;;  (lambda (prompt)
;;  ;;    (if (derived-mode-p 'eaf-mode)
;;  ;;        (pcase eaf--buffer-app-name
;;  ;;          ("browser" (if  (string= (eaf-call-sync "call_function" eaf--buffer-id "is_focus") "True")
;;  ;;                         (kbd "SPC")
;;  ;;                       (kbd eaf-evil-leader-key)))
;;  ;;          ("pdf-viewer" (kbd eaf-evil-leader-key))
;;  ;;          ("image-viewer" (kbd eaf-evil-leader-key))
;;  ;;          (_  (kbd "SPC")))
;;  ;;      (kbd "SPC")))))
#+end_src
** Messagers
#+begin_src emacs-lisp
(use-package! telega
  :commands (telega)
  :bind-keymap ("C-c t" . telega-prefix-map)
  :config
  (setq telega-use-docker t
        telega-filter-default '(folder "Ctx")))
#+end_src

** Custom code
*** Home-manager rebuild
#+begin_src emacs-lisp
(defun +rebuild ()
  "Rebuilds current home-manager configuration"
  (interactive
    (let* ((buffer-name "*home-manager-switch-log*")
           (buffer (get-buffer-create buffer-name))
           (cmd (concat "home-manager switch --flake " (substitute-in-file-name "$HOME/.dotfiles")))
           (proc (start-process-shell-command "home-manager-switch" buffer cmd)))
      (switch-to-buffer-other-window buffer)
      (evil-normal-state))))
#+end_src
*** Org-roam capture open frame
#+begin_src emacs-lisp
(defun org-roam-dailies-capture-today/open-frame (&optional initial-input key)
  "Opens the org-roam-capture window in a floating frame that cleans itself up once
you're done. This can be called from an external shell script."
  (interactive)
  (when (and initial-input (string-empty-p initial-input))
    (setq initial-input nil))
  (when (and key (string-empty-p key))
    (setq key nil))
  (let* ((frame-title-format "")
         (frame (if (+org-capture-frame-p)
                    (selected-frame)
                  (make-frame +org-capture-frame-parameters))))
    (select-frame-set-input-focus frame)  ; fix MacOS not focusing new frames
    (with-selected-frame frame
      (require 'org-capture)
      (require 'org-roam-dailies)
      (condition-case ex
          (letf! ((#'pop-to-buffer #'switch-to-buffer))
            (switch-to-buffer (doom-fallback-buffer))
            (let ((org-capture-initial initial-input)
                  org-capture-entry)
              (when (and key (not (string-empty-p key)))
                (setq org-capture-entry (org-capture-select-template key)))
              (org-roam-dailies-capture-today)))
        ('error
         (message "org-roam-dailies-capture-: %s" (error-message-string ex))
         (delete-frame frame))))))
#+end_src
*** Org toggl prettify haeder
#+begin_src emacs-lisp
(defun org-toggl-prettify-heading (heading)
  (require 'subr-x)
  (string-trim (string-remove-prefix "[ ]" (org-link-display-format heading))))
#+end_src

#+RESULTS:
: org-toggl-prettify-heading

** Miscellanea
#+begin_src emacs-lisp
(use-package! hcl-mode)
#+end_src
** Binding keys
#+begin_src emacs-lisp
(map! :leader :desc "Treemacs select window" "0" #'treemacs-select-window)

(map! :desc "One more evil quit" :map evil-window-map "C-q" #'evil-quit)

(map! :leader :desc "Open home.nix" "oh" (lambda () (interactive) (find-file (expand-file-name "home/home.nix" dotfiles-dir))))

(map! :map eshell-mode-map :i "C-n" #'eshell-next-matching-input-from-input :n "C-n" #'eshell-next-matching-input-from-input)

(map! :map eshell-mode-map :i "C-p" #'eshell-previous-matching-input-from-input :n "C-p" #'eshell-previous-matching-input-from-input)

(map! :leader :desc "Rebuild system" "rs" #'+rebuild)

(map! :leader :desc "Turn off ex highlighting" "sc" #'evil-ex-nohighlight)

(map! :leader :desc "Open config.org" "oc" (lambda () (interactive) (find-file (expand-file-name "config.org" doom-private-dir))))
#+end_src
Cyrillic colemak
#+begin_src emacs-lisp
(require 'quail)

(quail-define-package
 "cyrillic-colemak" "Cyrillic" "CC" nil
 "ЙЦУКЕН keyboard layout widely used in Russia (ISO 8859-5 encoding)
  in assuming that your default keyboard layout is Colemak"
 nil t t t t nil nil nil nil nil t)

(quail-define-rules
 ("1" ?1)
 ("2" ?2)
 ("3" ?3)
 ("4" ?4)
 ("5" ?5)
 ("6" ?6)
 ("7" ?7)
 ("8" ?8)
 ("9" ?9)
 ("0" ?0)
 ("[" ?х)
 ("]" ?ъ)
 ("`" ?ё)
 ("'" ?э)
 ("," ?б)
 ("." ?ю)
 ("p" ?к)
 ("y" ?щ)
 ("f" ?у)
 ("g" ?п)
 ("c" ?ч)
 ("r" ?ы)
 ("l" ?г)
 ("/" ?.)
 ("=" ?=)
 ("a" ?ф)
 ("o" ?ж)
 ("e" ?л)
 ("u" ?ш)
 ("i" ?д)
 ("d" ?с)
 ("h" ?ь)
 ("t" ?а)
 ("n" ?о)
 ("s" ?в)
 ("-" ?-)
 ("\\" ?\\)
 (";" ?з)
 ("q" ?й)
 ("j" ?н)
 ("k" ?т)
 ("x" ?я)
 ("b" ?е)
 ("m" ?р)
 ("w" ?ц)
 ("v" ?м)
 ("z" ?ы)

 ("!" ?!)
 ("@" ?\")
 ("#" ?№)
 ("$" ?\;)
 ("%" ?%)
 ("^" ?:)
 ("&" ??)
 ("*" ?*)
 ("(" ?()
 (")" ?))
 ("{" ?Х)
 ("}" ?Ъ)
 ("~" ?Ё)
 ("\"" ?Э)
 ("<" ?Б)
 (">" ?Ю)
 ("P" ?К)
 ("Y" ?Щ)
 ("F" ?У)
 ("G" ?Е)
 ("C" ?С)
 ("R" ?Ы)
 ("L" ?Г)
 ("?" ?,)
 ("+" ?+)
 ("A" ?Ф)
 ("O" ?Ж)
 ("E" ?Л)
 ("U" ?Ш)
 ("I" ?Д)
 ("D" ?П)
 ("H" ?Р)
 ("T" ?А)
 ("N" ?О)
 ("S" ?В)
 ("_" ?_)
 ("|" ?/)
 (":" ?З)
 ("Q" ?Й)
 ("J" ?Н)
 ("K" ?Т)
 ("X" ?Ч)
 ("B" ?И)
 ("M" ?Ь)
 ("W" ?Ц)
 ("V" ?М)
 ("Z" ?Я))
#+end_src
